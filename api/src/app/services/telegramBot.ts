import TelegramBot from 'node-telegram-bot-api';
import config from 'config';
import User from '../models/User';
import { transaction, PartialModelObject } from 'objection';

// Define bot types
interface BotConfig {
  token: string;
  options?: TelegramBot.ConstructorOptions;
}

class TelegramBotService {
  private bot: TelegramBot;
  private static instance: TelegramBotService;

  private constructor(config: BotConfig) {
    this.bot = new TelegramBot(config.token, config.options || { polling: true });
    this.setupEventHandlers();
  }

  /**
   * Get singleton instance of TelegramBotService
   */
  public static getInstance(): TelegramBotService {
    if (!TelegramBotService.instance) {
      const token = config.get<string>('telegramBot.token');
      if (!token) {
        throw new Error('Telegram bot token is not configured');
      }
      
      TelegramBotService.instance = new TelegramBotService({
        token,
        options: { polling: true }
      });
    }
    return TelegramBotService.instance;
  }

  /**
   * Set up event handlers for the bot
   */
  private setupEventHandlers(): void {
    // Handle /start command
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      const firstName = msg.from?.first_name || '';
      const lastName = msg.from?.last_name || '';
      const username = msg.from?.username;
      
      if (!userId) {
        console.error('No user ID found in message');
        return;
      }
      
      console.log(`Start command received from user ${userId} in chat ${chatId}`);

      try {
        // Check if user already exists
        const existingUser = await User.query().where('telegramId', String(userId)).first();
        
        if (existingUser) {
          // User already exists, update chat ID if needed
          if (existingUser.chatId !== String(chatId)) {
            await User.query().findById(existingUser.id).patch({
              chatId: String(chatId),
              updatedAt: new Date().toISOString()
            });
            console.log(`Updated chat ID for user ${userId} to ${chatId}`);
          }
          
          // Send welcome back message
          await this.bot.sendMessage(chatId, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName}! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?`);
          return;
        }

        // Create new user
        let trx;
        try {
          trx = await transaction.start(User.knex());
          
          // Create user with role 'customer' by default
          const userData: PartialModelObject<User> = {
            name: `${firstName} ${lastName}`.trim(),
            telegramId: String(userId),
            chatId: String(chatId),
            telegramLink: username ? `https://t.me/${username}` : undefined,
            role: 'customer',
          };
          
          const user = await User.query(trx).insert(userData);
          
          await trx.commit();
          
          // Send welcome message
          await this.bot.sendMessage(
            chatId, 
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ë–ª–æ–Ω–¥–∏–Ω–∫–∏ –≤ –ó–∞–∫–æ–Ω–µ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å"`
          );
          
          console.log(`New user created: ${user.id} (Telegram ID: ${userId})`);
        } catch (error) {
          if (trx) await trx.rollback();
          throw error;
        }
      } catch (error) {
        console.error('Error handling /start command:', error);
        await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // Handle /setexpert command - sets user role to expert
    this.bot.onText(/\/setexpert/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      
      if (!userId) {
        console.error('No user ID found in message');
        return;
      }
      
      console.log(`Set expert command received from user ${userId} in chat ${chatId}`);

      try {
        // Check if user exists
        const existingUser = await User.query().where('telegramId', String(userId)).first();
        
        if (!existingUser) {
          await this.bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
          return;
        }
        
        // Update user role to expert
        await User.query().findById(existingUser.id).patch({
          role: 'expert',
          updatedAt: new Date().toISOString()
        });
        
        await this.bot.sendMessage(chatId, '–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "–≠–∫—Å–ø–µ—Ä—Ç". –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏.');
        console.log(`User ${userId} role updated to expert`);
      } catch (error) {
        console.error('Error handling /setexpert command:', error);
        await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
    
    // Handle /help command - shows available commands
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      
      try {
        await this.bot.sendMessage(
          chatId,
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
          `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
          `/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n` +
          `/setexpert - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å "–≠–∫—Å–ø–µ—Ä—Ç"\n` +
          `/setcustomer - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å "–ö–ª–∏–µ–Ω—Ç"`
        );
      } catch (error) {
        console.error('Error handling /help command:', error);
      }
    });
    
    // Handle /setcustomer command - sets user role to customer
    this.bot.onText(/\/setcustomer/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      
      if (!userId) {
        console.error('No user ID found in message');
        return;
      }
      
      console.log(`Set customer command received from user ${userId} in chat ${chatId}`);

      try {
        // Check if user exists
        const existingUser = await User.query().where('telegramId', String(userId)).first();
        
        if (!existingUser) {
          await this.bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
          return;
        }
        
        // Update user role to customer
        await User.query().findById(existingUser.id).patch({
          role: 'customer',
          updatedAt: new Date().toISOString()
        });
        
        await this.bot.sendMessage(chatId, '–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "–ö–ª–∏–µ–Ω—Ç". –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.');
        console.log(`User ${userId} role updated to customer`);
      } catch (error) {
        console.error('Error handling /setcustomer command:', error);
        await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
    
    // Log errors
    this.bot.on('polling_error', (error: Error) => {
      console.error('Telegram bot polling error:', error);
    });
  }

  /**
   * Send notification to a user by Telegram ID
   */
  public async sendNotification(telegramId: string | number, message: string): Promise<boolean> {
    try {
      await this.bot.sendMessage(telegramId, message);
      return true;
    } catch (error) {
      console.error(`Error sending notification to user ${telegramId}:`, error);
      return false;
    }
  }

  /**
   * Send notification about consultation status change
   */
  public async sendConsultationStatusNotification(
    telegramId: string | number, 
    consultationId: number, 
    status: string,
    scheduledFor?: string | Date,
    expertName?: string
  ): Promise<boolean> {
    // Format date if provided
    let formattedDate = '';
    if (scheduledFor) {
      const date = new Date(scheduledFor);
      formattedDate = date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    
    // Create appropriate message based on status
    let message = '';
    
    switch(status) {
      case 'approved':
        message = `‚úÖ –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #${consultationId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n`;
        if (formattedDate && expertName) {
          message += `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formattedDate}\n`;
          message += `üë©‚Äç‚öñÔ∏è –Æ—Ä–∏—Å—Ç: ${expertName}\n\n`;
          message += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.`;
        }
        break;
        
      case 'rejected':
        message = `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é #${consultationId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n`;
        message += `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`;
        break;
        
      case 'completed':
        message = `‚úì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #${consultationId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n`;
        message += `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.`;
        break;
        
      case 'cancelled':
        message = `üö´ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #${consultationId} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n`;
        message += `–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.`;
        break;
        
      default:
        message = `–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ #${consultationId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}`;
        if (formattedDate && expertName) {
          message += `\n\nüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formattedDate}\n`;
          message += `üë©‚Äç‚öñÔ∏è –Æ—Ä–∏—Å—Ç: ${expertName}`;
        }
    }
    
    return this.sendNotification(telegramId, message);
  }
}

export default TelegramBotService;
